
build:library:
  stage: build
  image: alazartech/vs2019:1.9.5
  script:
    - cd atsfooters
    - cmake .
    - cmake --build . --config Release
    - ctest
    - cp ./Release/atsfooters.dll ../dotnet-example
  artifacts:
    paths:
      - ./dotnet-example/atsfooters.dll
    expire_in: 1 week
  tags:
    - docker-windows

test:dotnet:
  stage: test
  image: alazartech/vs2019:1.9.5
  script:
    - cd dotnet-example
    - dotnet run
  tags:
    - docker-windows

deploy:tag:
  image: alazartech/doc:1.9.5
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "${SSH_ADMIN_PRIVATE_KEY}" | tr -d '\r' | ssh-add -
    - mkdir -m 700 -p ~/.ssh
    - echo "${SSH_KNOWN_HOSTS}" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - git config --global user.name "Gitlab CI Admin"
    - git config --global user.email "software@alazartech.com"
  script:
    - pipenv install
    - pipenv run changelogparser version -i CHANGELOG.md -o release-version.txt
    - git fetch
    - git checkout master
    - git pull origin master
    - git merge --ff-only origin/${CI_COMMIT_REF_NAME}
    - git remote rm origin && git remote add origin git@gitlab.alazartech.com:${CI_PROJECT_PATH}.git
    - git tag v$(cat release-version.txt)
    - git push --tags
    - git push origin master
  stage: deploy
  tags:
    - docker
  only:
    - release

deploy:lib:
  script:
    - pipenv install
    - pipenv run createversionfile
    - set /p VERSION=<version.txt
    - If "%CI_COMMIT_TAG%"=="" (set DEST=C:\public\Software\nightly\%CI_PROJECT_NAME%\%CI_PROJECT_NAMESPACE%\%CI_BUILD_REF_NAME%) Else (set DEST=C:\public\Software\Utilities\ats-footers\v%VERSION%)
    - pipenv run deploy deploy-windows.yaml %CI_PROJECT_NAME% "%DEST%"
  stage: deploy
  tags:
    - windows
